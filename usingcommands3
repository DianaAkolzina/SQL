-- Create a new table called 'orders'
CREATE TABLE orders (
  order_id INT PRIMARY KEY,
  customer_id INT,
  order_date DATE,
  total_amount DECIMAL(10, 2)
);

-- Insert some sample data into the 'orders' table
INSERT INTO orders (order_id, customer_id, order_date, total_amount)
VALUES
  (1, 101, '2022-01-01', 100.00),
  (2, 102, '2022-01-02', 200.00),
  (3, 103, '2022-01-03', 150.00),
  (4, 101, '2022-01-04', 75.00),
  (5, 102, '2022-01-05', 300.00),
  (6, 104, '2022-01-06', 50.00),
  (7, 105, '2022-01-07', 175.00);

-- Retrieve the total amount of orders for each customer
SELECT customer_id, COUNT(*) AS num_orders, SUM(total_amount) AS total_spent
FROM orders
GROUP BY customer_id
HAVING COUNT(*) >= 2
ORDER BY total_spent DESC;

-- Join the 'orders' table with the 'customers' table
SELECT orders.order_id, customers.first_name, customers.last_name, orders.order_date, orders.total_amount
FROM orders
INNER JOIN customers
ON orders.customer_id = customers.customer_id;

-- Retrieve all customers and their orders, including customers who have not yet placed an order
SELECT customers.first_name, customers.last_name, orders.order_id, orders.order_date, orders.total_amount
FROM customers
LEFT JOIN orders
ON customers.customer_id = orders.customer_id;

-- Retrieve only the customers who have not yet placed an order
SELECT customers.first_name, customers.last_name
FROM customers
LEFT JOIN orders
ON customers.customer_id = orders.customer_id
WHERE orders.order_id IS NULL;

-- Update the 'total_amount' of an order
UPDATE orders
SET total_amount = 250.00
WHERE order_id = 2;

-- Delete an order
DELETE FROM orders
WHERE order_id = 3;

-- Truncate the 'orders' table
TRUNCATE TABLE orders;

-- Add a foreign key constraint to the 'orders' table
ALTER TABLE orders
ADD CONSTRAINT fk_customer_id
FOREIGN KEY (customer_id) REFERENCES customers(customer_id);

-- Add a unique index to the 'orders' table
CREATE UNIQUE INDEX idx_order_id ON orders (order_id);

-- Retrieve the average total amount of orders
SELECT AVG(total_amount) AS avg_total_amount
FROM orders;

-- Retrieve the maximum total amount of orders
SELECT MAX(total_amount) AS max_total_amount
FROM orders;

-- Retrieve the minimum total amount of orders
SELECT MIN(total_amount) AS min_total_amount
FROM orders;

-- Retrieve the distinct customer IDs from the 'orders' table
SELECT DISTINCT customer_id
FROM orders;
